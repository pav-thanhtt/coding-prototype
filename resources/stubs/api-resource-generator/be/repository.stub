<?php

declare(strict_types = 1);

namespace App\Repositories;

use App\Models\{{{tableName(ClassNameSingular)}}};
use Illuminate\Database\Eloquent\Builder;

class {{{tableName(ClassNameSingular)}}}Repository
{
    /**
     * @var {{{tableName(ClassNameSingular)}}}
     */
    private {{{tableName(ClassNameSingular)}}} ${{{tableName(PropertyName)}}}Model;

    public function __construct({{{tableName(ClassNameSingular)}}} ${{{tableName(PropertyName)}}}Model)
    {
        $this->{{{tableName(PropertyName)}}}Model = ${{{tableName(PropertyName)}}}Model;
    }

    /**
     * @param Builder $builder
     * @param array $requestData
     *
     * @return Builder
     */
    private function __sort(Builder $builder, array $requestData): Builder
    {
        $sortField = isset($requestData['sort']) && ! empty($requestData['sort']) ? $requestData['sort'] : 'updated_at';

        $direction = isset($requestData['sort_direction']) && ! empty($requestData['sort_direction']) ? $requestData['sort_direction'] : 'desc';

        $sortColumns = [
{{{renderSortFields(3)}}}
        ];

        if (in_array($sortField, $sortColumns, true)) {
            $builder = $builder->orderBy($sortField, $direction);
        }

        return $builder;
    }

    public function getAll()
    {
        return $this->{{{tableName(PropertyName)}}}Model->all();
    }

    public function getFiltered(array $requestData, $returnFirstFlg = false)
    {
        $builder = $this->{{{tableName(PropertyName)}}}Model->filter($requestData);

        if ($returnFirstFlg) {
            return $builder->first();
        }

        return $this->__sort($builder, $requestData)->get();
    }

    public function getFilteredPaginator(array $requestData)
    {
        $perPage = $requestData['per_page'] ?? config('eloquentfilter.paginate_limit');

        ${{{tableName(ParamNamePlural)}}} = $this->{{{tableName(PropertyName)}}}Model->filter($requestData);

        return $this->__sort(${{{tableName(ParamNamePlural)}}}, $requestData)->paginate($perPage);
    }

    public function getByPK(int $id)
    {
        return $this->{{{tableName(PropertyName)}}}Model->find($id);
    }

    public function updateOrCreate(array $attributes, array $values = [])
    {
        return $this->{{{tableName(PropertyName)}}}Model->updateOrCreate($attributes, $values);
    }

    public function destroy(int | array $ids)
    {
        return $this->{{{tableName(PropertyName)}}}Model->destroy($ids);
    }
}
