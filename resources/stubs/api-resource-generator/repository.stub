<?php

declare(strict_types = 1);

namespace App\Repositories;

use App\Models\{{tableName(ClassNameSingular)}};
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Pagination\LengthAwarePaginator;

class {{tableName(ClassNameSingular)}}Repository
{
    /**
     * @var {{tableName(ClassNameSingular)}}
     */
    private {{tableName(ClassNameSingular)}} ${{tableName(PropertyName)}}Model;

    public function __construct({{tableName(ClassNameSingular)}} ${{tableName(PropertyName)}}Model)
    {
        $this->{{tableName(PropertyName)}}Model = ${{tableName(PropertyName)}}Model;
    }

    /**
     * @param Builder $builder
     * @param array $requestData
     *
     * @return Builder
     */
    private function __sort(Builder $builder, array $requestData): Builder
    {
        $sortField = isset($requestData['sort_field']) && !empty($requestData['sort_field']) ? $requestData['sort_field'] : 'updated_at';

        $direction = isset($requestData['sort_direction']) && !empty($requestData['sort_direction']) ? $requestData['sort_direction'] : 'desc';

        $sortColumns = [
{{renderSortFields(3)}}
        ];

        if (in_array($sortField, $sortColumns, true)) {
            $builder = $builder->orderBy($sortField, $direction);
        }

        return $builder;
    }

    /**
     * @param array $requestData
     *
     * @return LengthAwarePaginator
     */
    public function getList(array $requestData): LengthAwarePaginator
    {
        $perPage = $requestData['per_page'] ?? config('eloquentfilter.paginate_limit');

        ${{tableName(ParamNamePlural)}} = $this->{{tableName(PropertyName)}}Model->filter($requestData);

        return $this->__sort(${{tableName(ParamNamePlural)}}, $requestData)->paginate($perPage);
    }

    /**
     * @param array $params
     *
     * @return bool|Builder|Model
     */
    public function create(array $params): Model|Builder|bool
    {
        return $this->{{tableName(PropertyName)}}Model->create($params);
    }

    /**
     * @param {{tableName(ClassNameSingular)}} ${{tableName(PropertyName)}}
     * @param array $params
     *
     * @return bool
     */
    public function update({{tableName(ClassNameSingular)}} ${{tableName(PropertyName)}}, array $params): bool
    {
        return ${{tableName(PropertyName)}}->update($params);
    }

    /**
     * @param {{tableName(ClassNameSingular)}} ${{tableName(PropertyName)}}
     *
     * @return bool
     */
    public function delete({{tableName(ClassNameSingular)}} ${{tableName(PropertyName)}}): bool
    {
        return ${{tableName(PropertyName)}}->delete();
    }
}
